type: edu
files:
- name: predictor/predictor.py
  visible: true
  text: |
    print('Hello, World!')
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    import numpy as np


    def remember_data(data, count_dict):
        for i in range(len(data) - COMBO_LENGTH):
            comb = data[i:i + COMBO_LENGTH]
            next_input = int(data[i + COMBO_LENGTH])
            count_dict[comb][next_input] += 1

        return count_dict


    def make_prediction(data, count_dict):
        pred = str()
        for i in range(COMBO_LENGTH):
            res = str(np.random.choice([0, 1]))
            pred += res

        for i in range(len(data) - COMBO_LENGTH):
            comb = data[i:i + COMBO_LENGTH]
            try:
                if count_dict[comb][0] > count_dict[comb][1]:
                    probas = [1, 0]
                elif count_dict[comb][0] < count_dict[comb][1]:
                    probas = [0, 1]
                else:
                    probas = [0.5, 0.5]



            except Exception:
                probas = [0.5, 0.5]

            res = str(np.random.choice([0, 1], p=probas))
            pred += res

        return pred


    def estimate_prediction_accuracy(pred, data):
        pr = [bool(int(elem)) for elem in pred]
        gt = [bool(int(elem)) for elem in data]
        pred_correct = ~np.bitwise_xor(pr, gt)
        return sum(pred_correct.astype(int))


    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    COMBO_LENGTH = 3
    MIN_DATA_STR_LEN = 100
    INSTRUCTION = 'Print a random string containing 0 or 1'
    GAME_END = 'Game over!'

    keys = []
    for i in range(2 ** COMBO_LENGTH):
        keys.append(str((bin(i)[2:].zfill(3))))

    values = [[0, 0] for _ in range(2 ** COMBO_LENGTH)]
    count_dict = dict(zip(keys, values))
    inp = '1010101101010101010011100101001010100101010000101000101010000100101011010001001000101011101000101010010100101'
    count_dict = remember_data(inp, count_dict)

    appr_pred_set = set()
    for i in range(1000):
        pred = make_prediction(inp, count_dict)
        appr_pred_set = appr_pred_set | set([pred[COMBO_LENGTH:]])

    appr_pred_output_dict = {}
    appr_pred_count_dict = {}
    for appr_pred in appr_pred_set:
        correct_guesses = estimate_prediction_accuracy(appr_pred, inp[COMBO_LENGTH:])
        ideal_output = 'Computer guessed right {} out of {} symbols ({:03.2f} %)'.format(correct_guesses,
                                                                                         len(inp) - COMBO_LENGTH,
                                                                                         100 * correct_guesses / (len(
                                                                                             inp) - COMBO_LENGTH))
        appr_pred_output_dict[appr_pred] = ideal_output
        appr_pred_count_dict[appr_pred] = correct_guesses


    class GenRandTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=["1010101101010",
                                    "1010100111001010010101001010100001010001",
                                    '01010000100101011010001001000101011101000101010010100101',
                                    inp,
                                    'enough'],
                             attach=[109, appr_pred_output_dict, appr_pred_count_dict, inp, 1]),

                    TestCase(stdin=["1010101101010_some_wrong_symbols",
                                    "1010100111001010010101001010100001010001_some_more_wrong_symbols",
                                    '01010000100101011010001001000101011101000101010010100101',
                                    'some_irrelevant_symbols_in_the_game',
                                    inp,
                                    'enough'],
                             attach=[109, appr_pred_output_dict, appr_pred_count_dict, inp, 1]),

                    TestCase(stdin=["1010101101010",
                                    "1010100111001010010101001010100001010001",
                                    '01010000100101011010001001000101011101000101010010100101',
                                    inp,
                                    inp,
                                    'enough'],
                             attach=[109, appr_pred_output_dict, appr_pred_count_dict, inp, 2])
                    ]

        def check(self, output: str, attach) -> CheckResult:
            correct_len, appr_pred_output_dict, appr_pred_count_dict, inp, game_iterations = attach
            strings = [s for s in output.split('\n') if s != '']

            if not strings:
                return CheckResult.wrong("The output seems to be empty.")

            if len(strings) < 3:
                return CheckResult.wrong("Your program is supposed to output at least 3 lines.\n"
                                         "However, there are less than 3 lines.")

            instructions = strings[2]
            data_string = inp

            if INSTRUCTION.lower() not in instructions.lower():
                return CheckResult.wrong('Please give instructions to user in the form "{}"\n'
                                         'The instruction should be given in the third line of the program.'.format(INSTRUCTION))

            if len(data_string) < MIN_DATA_STR_LEN:
                return CheckResult.wrong('Data string \"{}\" is too short, it should have length >={}'.format(data_string,
                                                                                                              MIN_DATA_STR_LEN))
            if len(data_string) != correct_len:
                return CheckResult.wrong(
                    "The string \"{}\" of your output is supposed to contain the final data string. \n"
                    "However, it contains wrong number of symbols".format(data_string)
                )

            game_finish = strings[-1]
            final_instruction = strings[-2]

            if 'game' not in game_finish.lower() or 'over' not in game_finish.lower():
                return CheckResult.wrong(
                    "The final string \"{}\" of your output is supposed to contain game ending indicator in the form {}".format(
                        game_finish, GAME_END)
                )

            if INSTRUCTION.lower() not in final_instruction.lower():
                return CheckResult.wrong(
                    "The pre-final string \"{}\" of your output is supposed to contain instructions in the form {}".format(
                        final_instruction, INSTRUCTION)
                )

            cap = 1000
            for iter in range(game_iterations):

                start_ind = -2 - game_iterations * 5
                prediction_declaration = strings[start_ind + iter * 5 + 1]
                prediction = strings[start_ind + iter * 5 + 2]
                result = strings[start_ind + iter * 5 + 3]
                balance_info = strings[start_ind + iter * 5 + 4]
                balance_info = balance_info.strip('.')
                balance_info = balance_info.strip(' ')

                if '(' not in result or ')' not in result:
                    return CheckResult.wrong("The last line of your output is supposed "
                                             "to contain the percentage of correct guesses.\n"
                                             "This number should be put in parentheses.")
                percentage = result[result.index('(') + 1:result.index(')')].replace('%', '').replace(' ', '')
                if '.' in percentage:
                    percentage = percentage[:percentage.index('.')]

                if 'prediction' not in prediction_declaration.lower():
                    return CheckResult.wrong("Please use the word \"prediction\" in a line before the predictor output")

                if len(prediction) != correct_len:
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the predictor output. \n"
                        "However, it contains wrong number of symbols".format(prediction)
                    )

                pred_success = prediction[COMBO_LENGTH:] in appr_pred_output_dict.keys()
                if pred_success != True:
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the predictor output. \n"
                        "However, it cannot be generated by prediction algorithm described".format(prediction)
                    )

                if 'computer' not in result.lower() or 'guessed right' not in result.lower():
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the prediction result. \n"
                        "However, it does not meet the requirements".format(result)
                    )

                ideal_result = appr_pred_output_dict[prediction[COMBO_LENGTH:]]
                ideal_percentage = ideal_result[result.index('(') + 1:result.index(')')].replace('%', '').replace(' ', '')
                if '.' in ideal_percentage:
                    ideal_percentage = ideal_percentage[:ideal_percentage.index('.')]
                if percentage != ideal_percentage:
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the prediction result. \n"
                        "However, the prediction accuracy does not coincide with the expected one".format(result)
                    )

                if 'balance' not in balance_info or '$' not in balance_info:
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the information about user balance. \n"
                        "However, it does not meet the requirements".format(balance_info)
                    )

                try:
                    output_cap = int(balance_info[balance_info.index('$') + 1:])
                    correct_guesses = appr_pred_count_dict[prediction[COMBO_LENGTH:]]
                    cap += len(inp) - 2 * correct_guesses - COMBO_LENGTH

                    if output_cap != cap:
                        return CheckResult.wrong(
                            "The string \"{}\" of your output is supposed to contain the information about user balance. \n"
                            "However, its value does not coincide with the expected one".format(balance_info)
                        )
                except ValueError:
                    return CheckResult.wrong(
                        "The string \"{}\" of your output is supposed to contain the information about user balance. \n"
                        "However, the symbols after the $ sign cannot be turned into an integer value".format(balance_info)
                    )
            return CheckResult.correct()


    if __name__ == '__main__':
        GenRandTest('predictor.predictor').run_tests()
  learner_created: false
- name: predictor/pre2.py
  visible: true
  text: |
    import random

    bin_list = ["000", "001", "010", "011", "100", "101", "110", "111"]
    num = 100


    def input_data():
        all_str = []
        while len(all_str) < num:
            print('Print a random string containing 0 or 1:')
            print('')
            str_ = input()

            all_str += [a for a in str_ if a == '0' or a == '1']
            if (num - len(all_str)) <= 0:
                break
            print(f'The current data length is {len(all_str)}, {num - len(all_str)} symbols left')

        print(f"\nFinal data string:\n{''.join(all_str)}")
        return all_str


    def generate_prediction(len_str):
        global dict_data
        generation = bin_list[random.randint(0, len(bin_list)-1)]
        # generation = '110' # test
        generation = list(generation)
        # print(generation)
        if len_str > 3:
            for _ in range(len_str-3):
                # last_3 = str(generation[-3]) + str(generation[-2]) + str(generation[-1])
                last_3 = ''.join(generation[-3:])

                # --- test 100101010010101001111010101001111101010
                # protection against sequence repetitions
                # if _ >= 1:
                #     if ''.join(generation[-5:]) == '01010' or ''.join(generation[-5:]) == '10101' \
                #             or ''.join(generation[-4:]) == '1111' or ''.join(generation[-4:]) == '0000':
                #         generation.append(str(random.randint(0, 1)))
                #         # print(generation[-1])
                #         continue
                # # ---

                if dict_data[last_3][0] >= dict_data[last_3][1]:
                    generation.append('0')
                else:
                    generation.append('1')
        return ''.join(generation)


    def generate_prediction_random(len_str):
        global dict_data
        generation = bin_list[random.randint(0, len(bin_list) - 1)]
        generation = list(generation)

        if len_str > 3:
            for _ in range(len_str - 3):
                generation.append(str(random.randint(0, 1)))
        return ''.join(generation)


    def compare_prediction(str1, str2):
        n = len(str1)
        s = [j for j in range(3, len(str1) - 1) if str1[j] != str2[j]]
        # print(s)
        k = len(s)
        per = round(100 / n * k, 2)
        print(f'\nComputer guessed right {str(k)} out of {str(n - 3)} symbols ({str(per)} %)')


    # input_list = '1010101101010101010011100101001010100101010000101000101010000100101011010001001000101011101000101010010100101'
    #               1010101101010101010011100101001010100101010000101000101010000100101011010001001000101011101000101010010100101
    # input_list = list(input_list)

    input_list = input_data()

    final_list = [input_list[symbol:symbol+4] for symbol in range(0, len(input_list) - 3)]
    # print(final_list)
    dict_data = dict.fromkeys(bin_list, (0, 0))
    for d in final_list:
        key = ''.join(d[0:3])
        x, y = dict_data[key]

        if d[3] == '0':
            x += 1
        elif d[3] == '1':
            y += 1
        dict_data[key] = (x, y)

    # -- print analysis
    # for i in bin_list:
    #     print(f'{i}: {dict_data[i][0]}, {dict_data[i][1]}')
    # --

    print('\nPlease enter a test string containing 0 or 1:\n')
    user_str = input()  # '0110001010100101' #  # test

    # print(user_str) # test
    predict_str = generate_prediction(len(user_str))
    print('prediction: \n' + predict_str)
    compare_prediction(user_str, predict_str)

    # -- random prediction sequence
    # predict_str = generate_prediction_random(len(user_str))
    # print('prediction: \n' + predict_str)
    # compare_prediction(user_str, predict_str)
  learner_created: true
- name: predictor/pre1.py
  visible: true
  text: |-
    from random import choice
    valid_chars = ["0", "1"]
    processed_string = []
    while len(processed_string) < 100:
        print("Print a random string containing 0 or 1")
        user_string = input()
        for char in user_string:
            if char in valid_chars:
                processed_string.append(char)
    print("Final data string:")
    print("".join(processed_string))

    triads = {
        '000': {'0': 0, '1': 0}, '001': {'0': 0, '1': 0}, '010': {'0': 0, '1': 0},
        '011': {'0': 0, '1': 0}, '100': {'0': 0, '1': 0}, '101': {'0': 0, '1': 0},
        '110': {'0': 0, '1': 0}, '111': {'0': 0, '1': 0}
    }

    for i in range(len(processed_string) - 3):
        text = processed_string[i:i+4]
        triads[''.join(text[0:3])][text[3]] += 1

    print("Please enter a test string containing 0 or 1:")
    test_string = input()

    # create prediction
    prediction = choice(list(triads.keys()))

    for i in range(len(test_string) - 3):
        triad = test_string[i:i+3]
        prediction += max(triads[triad], key=triads[triad].get)

    # check accuracy of prediction
    total = len(prediction) - 3
    correct = 0
    for i, bit in enumerate(prediction):
        if i > 2:
            if test_string[i] == prediction[i]:
                correct += 1
    accuracy = round((correct / total) * 100, 2)

    # print results
    print("prediction")
    print(prediction)
    print(f"Computer guessed right {correct} out of {total} symbols ({accuracy} %)")
  learner_created: true
feedback_link: https://hyperskill.org/projects/156/stages/816/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 04 Sep 2021 21:14:05 UTC
record: 4
